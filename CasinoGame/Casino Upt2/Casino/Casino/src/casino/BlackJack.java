/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package casino;

import static casino.Login.Currency;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Random;


/**
 *
 * @author jakec
 *
 */
public class BlackJack extends javax.swing.JFrame {

    private static String[] cardNum = {"A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "K", "Q"};
    private static String[] cardType = {"C", "D", "H", "S"};
    private static ArrayList<String> usedCards = new ArrayList<>();
    public int bet;
    public int PlayerTotal = 0;
    private int StandCount = 0;
    private int DealerTotal = 0;
    private static int HitCount = 0;
    
    /**
     * Creates new form BlackJack
     */
    public BlackJack() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Hit = new javax.swing.JButton();
        Stand = new javax.swing.JButton();
        DoubleDown = new javax.swing.JButton();
        EnterBet = new javax.swing.JLabel();
        Bet = new javax.swing.JTextField();
        Play = new javax.swing.JButton();
        CurrencyDisplay = new javax.swing.JLabel();
        cardDisplay = new javax.swing.JLabel();
        CardDisplay2 = new javax.swing.JLabel();
        CardDisplayTwo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        PlayerTotalDisplay = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        DealerTotalDisplay = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Hit.setText("Hit");
        Hit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HitActionPerformed(evt);
            }
        });

        Stand.setText("Stand");
        Stand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StandActionPerformed(evt);
            }
        });

        DoubleDown.setText("Double Down");
        DoubleDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DoubleDownActionPerformed(evt);
            }
        });

        EnterBet.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        EnterBet.setText("Enter bet:");

        Bet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BetActionPerformed(evt);
            }
        });

        Play.setText("Play");
        Play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayActionPerformed(evt);
            }
        });

        CurrencyDisplay.setText("0");

        jLabel1.setText(".");

        jLabel2.setText(".");

        jLabel3.setText(".");

        jLabel4.setText(".");

        jLabel5.setText(".");

        jLabel6.setText("Total:");

        PlayerTotalDisplay.setText("0");

        jLabel7.setText(".");

        jLabel8.setText(".");

        jLabel9.setText(".");

        jLabel10.setText("Dealer Total: ");

        DealerTotalDisplay.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CurrencyDisplay, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(CardDisplay2)
                        .addGap(81, 81, 81))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(CardDisplayTwo)
                        .addGap(114, 114, 114))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(498, 498, 498)
                        .addComponent(Hit, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Stand, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(DoubleDown, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(261, 261, 261)
                        .addComponent(cardDisplay))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addGap(165, 165, 165)
                                .addComponent(jLabel2)
                                .addGap(16, 16, 16))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(336, 336, 336)
                                .addComponent(jLabel7)
                                .addGap(126, 126, 126)
                                .addComponent(jLabel8)
                                .addGap(116, 116, 116)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Bet, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(43, 43, 43)
                                        .addComponent(Play))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(EnterBet)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel10)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(DealerTotalDisplay)))))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(106, 106, 106)
                                .addComponent(jLabel3)
                                .addGap(116, 116, 116)
                                .addComponent(jLabel4)
                                .addGap(86, 86, 86)
                                .addComponent(jLabel5))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(250, 250, 250))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(667, 667, 667)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PlayerTotalDisplay)))
                .addContainerGap(440, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CurrencyDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(DealerTotalDisplay))
                .addGap(84, 84, 84)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EnterBet)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(jLabel8))
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Bet, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Play)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 219, Short.MAX_VALUE)
                .addComponent(CardDisplay2)
                .addGap(20, 20, 20)
                .addComponent(CardDisplayTwo)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(27, 27, 27)
                .addComponent(cardDisplay)
                .addGap(72, 72, 72)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(PlayerTotalDisplay))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Hit, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Stand, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DoubleDown, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BetActionPerformed

    private void PlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayActionPerformed
        String inputBet = Bet.getText();
        boolean TestForInteger = false;
        try {
            Integer.parseInt(inputBet); //Changes the input String to an Integer
            TestForInteger = true;
        } catch (Exception e) {
            System.out.println("Error: Please type a valid INTEGER.");
        }
        if ((TestForInteger == true) && (Integer.parseInt(inputBet) < Login.Currency) && (Login.Currency > 0)) {
            bet = Integer.parseInt(inputBet);
            Currency = Currency - bet;
            BlackJack.CurrencyDisplay.setText(Integer.toString(Currency));
            Bet.setVisible(false);
            EnterBet.setVisible(false);
            Play.setVisible(false);
            updateCurrency();
            DealCards();
        } else if ((TestForInteger == true) && (Integer.parseInt(inputBet) >= Login.Currency)) {
            System.out.println("Error: Not enough currency.");
        }
    }//GEN-LAST:event_PlayActionPerformed

    private void HitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HitActionPerformed
        Hit();
    }//GEN-LAST:event_HitActionPerformed
    
    private void StandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StandActionPerformed
        Hit.setVisible(false); //Assures the user can no longer get more cards after they have hit.
        Stand.setVisible(false);
        DoubleDown.setVisible(false);
        Stand();
        CheckWhoWins();
        
    }//GEN-LAST:event_StandActionPerformed

    private void DoubleDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DoubleDownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DoubleDownActionPerformed

    public void Stand() {
        boolean flag = false;
        Random r = new Random();
        int RcardNum1 = r.nextInt(cardNum.length - 1);   //Selects a random numbered card in the list
        int RcardLen1 = r.nextInt(cardType.length - 1); //Selects a random card type from a list of 4.
        
        for (int k = 0; k < usedCards.size(); k++) {  //Checks to make sure the card isn't in the usedCards list. 
            if ((Integer.toString(RcardNum1) + Integer.toString(RcardLen1)).equals(usedCards.get(k))) {
                flag = true;
            }
        }

        if ((flag == false) && (StandCount == 0)) {
            jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("cards\\" + cardNum[RcardNum1] + cardType[RcardLen1] + ".png"))); //Sets the jLabel to the png image corresponding with the random card selected.
            usedCards.add(cardNum[RcardNum1] + cardType[RcardLen1]);
            
        } else if ((flag == false) && (StandCount == 1)) {
            jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("cards\\" + cardNum[RcardNum1] + cardType[RcardLen1] + ".png")));
            usedCards.add(cardNum[RcardNum1] + cardType[RcardLen1]);
            
        } else if ((flag == false) && (StandCount == 2)) {
            jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("cards\\" + cardNum[RcardNum1] + cardType[RcardLen1] + ".png")));
            usedCards.add(cardNum[RcardNum1] + cardType[RcardLen1]);
            
        } else if (flag == true) {
            Stand();
        }
        StandCount++;
        RcardNum1++;
        if (RcardNum1 >= 10) {
            RcardNum1 = 10;
        }
        
        DealerTotal = DealerTotal + RcardNum1;
        DealerTotalDisplay.setText(Integer.toString(DealerTotal));
        
        while (DealerTotal <= 17) { //Will continue to draw cards for the Dealer until the total is above 17.
            Stand();
            //Insert "1 second timer" here
        }
        
        
        
    }

    public void Hit() {
        boolean flag = false;

        Random r = new Random();

        int RcardNum1 = r.nextInt(cardNum.length - 1);
        int RcardLen1 = r.nextInt(cardType.length - 1);
        for (int k = 0; k < usedCards.size(); k++) {
            if ((Integer.toString(RcardNum1) + Integer.toString(RcardLen1)).equals(usedCards.get(k))) {
                flag = true;
            }
        }

        if ((flag == false) && (HitCount == 0)) {
            jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("cards\\" + cardNum[RcardNum1] + cardType[RcardLen1] + ".png")));
            usedCards.add(cardNum[RcardNum1] + cardType[RcardLen1]);
            HitCount++;
        } else if ((flag == false) && (HitCount == 1)) {
            jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("cards\\" + cardNum[RcardNum1] + cardType[RcardLen1] + ".png")));
            usedCards.add(cardNum[RcardNum1] + cardType[RcardLen1]);
            HitCount++;
        } else if ((flag == false) && (HitCount == 2)) {
            jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("cards\\" + cardNum[RcardNum1] + cardType[RcardLen1] + ".png")));
            usedCards.add(cardNum[RcardNum1] + cardType[RcardLen1]);
            HitCount++;
        } else if (flag == true) {
            Hit();
        }

        RcardNum1++;
        //RcardNum1++;
        if (RcardNum1 >= 10) {
            RcardNum1 = 10;
        }
        PlayerTotal = PlayerTotal + RcardNum1;
        PlayerTotalDisplay.setText(Integer.toString(PlayerTotal));
        if (PlayerTotal > 21) {
            Winner = 3;
            CheckWhoWins();
        }
    }
    
    private static int Winner = 0;  //   0 = Draw,    1 = Player Wins,   2 = Dealer Wins, 4 = Player Bust.
    public void CheckWhoWins(){ 
        
        if (Winner == 3) {
            showWinner();
        }
        
        System.out.println(PlayerTotal);
        System.out.println(DealerTotal);
        
        //Using all the selective if statements, this decides who the winner is.
        int PlayerDifference = 21 - PlayerTotal; //This decides the difference between 21 and the card totals. This helps to deicde which player wins that round, depending on how close you are to 21.
        int DealerDifference = 21 - DealerTotal; //Does the same as PlayerDiffence but this is for the Computers cards totals.
        System.out.println(PlayerDifference + "|  Dealer: " + DealerDifference);
        
        if ((PlayerTotal>21) && (DealerTotal > 21)) {
            Winner = 0;
            }else if (PlayerTotal > 21) {
                Winner = 2;
                showWinner();
            } else if ((PlayerTotal < 21) && (DealerTotal > 21)){
                Winner = 1;
            } else if ((PlayerTotal == 21)&&(DealerTotal != 21)){
                Winner = 1;
            } else if ((PlayerTotal != 21)&&(DealerTotal == 21)){
                Winner = 2;
            } else if ((PlayerDifference == DealerDifference)){          //FIX HERE
                Winner = 0;
            } else if ((PlayerDifference > DealerDifference)){
                Winner = 2;
            } else if ((PlayerDifference < DealerDifference)){
                Winner = 1;
        } else {
            System.out.println("Not worked");
        }
        
        
        showWinner();
        
    }
    
    private void showWinner(){
        //Displaying the Winner on screen as a seperate window.
        WinnerPanel DisplayWinner = new WinnerPanel();
        DisplayWinner.setVisible(true);
        DisplayWinner.setSize(500,200);
        DisplayWinner.setLocationRelativeTo(null);
        WinnerPanel.DealerW.setVisible(false);
        WinnerPanel.Draw.setVisible(false);
        WinnerPanel.PlayerW.setVisible(false);
        WinnerPanel.playerBust.setVisible(false);
        
        if (BlackJack.Winner == 0) {
            WinnerPanel.Draw.setVisible(true);
        }else if (BlackJack.Winner == 1) {
            WinnerPanel.PlayerW.setVisible(true);
        }else if (BlackJack.Winner == 2) {
            WinnerPanel.DealerW.setVisible(true);
        }else if (BlackJack.Winner == 3) {
            WinnerPanel.playerBust.setVisible(true);
        }
    }
    
    
    public void updateCurrency() {
        try {
            Connection connect = DriverManager.getConnection("jdbc:derby://localhost:1527/PlayersDatabase", "jake", "rose");
            Statement stmt = connect.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE); //Allows you to scroll through the list of records, and to Update the table.

            String sql = "SELECT PLAYERNAME,PLAYERCURRENCY FROM app.TBL_PLAYERS";
            ResultSet Results = stmt.executeQuery(sql);

            while (Results.next()) { //when there is another record in the result set, it will continue to loop.
                System.out.println(Login.UserRegisterInput.getText());
                if (Results.getString("PLAYERNAME").equals(Login.UserRegisterInput.getText())) {
                    System.out.println(Results.getInt("PLAYERCURRENCY"));
                }
            }
            Results.close();
            connect.close();
            stmt.close();
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void DealCards() {
        boolean flag = false;

        Random r = new Random();
        //for (int j = 0; j < 2; j++) {
        //for (int i = 0; i < 2; i++) {
        int RcardNum1 = r.nextInt(cardNum.length - 1);
        int RcardLen1 = r.nextInt(cardType.length - 1);
        int RcardNum2 = r.nextInt(cardNum.length - 1);
        int RcardLen2 = r.nextInt(cardType.length - 1);
        for (int k = 0; k < usedCards.size(); k++) {
            if ((cardNum[RcardNum1] + cardType[RcardLen1] == usedCards.get(k) && (cardNum[RcardNum2] + cardType[RcardLen2] == usedCards.get(k)))) {
                flag = true;
            }
        }
        if (flag == false) {
            jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("cards\\" + cardNum[RcardNum1] + cardType[RcardLen1] + ".png")));
            usedCards.add(cardNum[RcardNum1] + cardType[RcardLen1]);
            jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("cards\\" + cardNum[RcardNum2] + cardType[RcardLen2] + ".png")));
            usedCards.add(cardNum[RcardNum2] + cardType[RcardLen2]);
            RcardNum1++;
            RcardNum2++;
            if (RcardNum1 >= 10) {
                RcardNum1 = 10;
            }
            if (RcardNum2 >= 10) {
                RcardNum2 = 10;
            }
            PlayerTotal = PlayerTotal + RcardNum1 + RcardNum2;
            PlayerTotalDisplay.setText(Integer.toString(PlayerTotal));
        }

        //}
        //}
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BlackJack.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BlackJack.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BlackJack.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BlackJack.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BlackJack().setVisible(true);
                CurrencyDisplay.setText(Integer.toString(Login.Currency));
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Bet;
    private javax.swing.JLabel CardDisplay2;
    public static javax.swing.JLabel CardDisplayTwo;
    public static javax.swing.JLabel CurrencyDisplay;
    private javax.swing.JLabel DealerTotalDisplay;
    private javax.swing.JButton DoubleDown;
    private javax.swing.JLabel EnterBet;
    private javax.swing.JButton Hit;
    private javax.swing.JButton Play;
    private javax.swing.JLabel PlayerTotalDisplay;
    private javax.swing.JButton Stand;
    private javax.swing.JLabel cardDisplay;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables
}
